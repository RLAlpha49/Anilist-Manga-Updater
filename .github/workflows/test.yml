name: Test Suite

on:
  push:
    branches: [electron]
  pull_request:
    branches: [electron]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4

      - name: Generate cache key
        id: cache-key
        run: echo "key=node-modules-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
          cache: "npm"

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ steps.cache-key.outputs.key }}

      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci

  unit-test:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Run unit tests
        run: npm run test

  coverage:
    needs: [setup, unit-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}

      - name: Generate coverage report
        run: npm run test:coverage || true

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  wait-for-windows:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Windows build workflow to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: "Build Windows Artifacts"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  wait-for-macos:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for macOS build workflow to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: "Build macOS Artifacts"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  wait-for-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for Linux build workflow to complete
        uses: lewagon/wait-on-check-action@v1.3.4
        with:
          ref: ${{ github.ref }}
          check-name: "Build Linux Artifacts"
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 10

  e2e-test-windows:
    needs: [setup, wait-for-windows]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Restore cached dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci
      - name: Get build workflow run ID
        id: get-workflow-run
        run: |
          $runId = gh api repos/${{ github.repository }}/actions/workflows/build.yml/runs --jq '.workflow_runs[] | select(.head_branch == "${{ github.ref_name }}") | select(.conclusion == "success") | .id' | Select-Object -First 1
          echo "run_id=$runId" >> $env:GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download Windows build artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: out
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-workflow-run.outputs.run_id }}

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run E2E tests
        run: npm run test:e2e
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-windows
          path: playwright-report/

  e2e-test-macos:
    needs: [setup, wait-for-macos]
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Restore cached dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci
      - name: Get build workflow run ID
        id: get-workflow-run
        run: |
          runId=$(gh api repos/${{ github.repository }}/actions/workflows/build.yml/runs --jq '.workflow_runs[] | select(.head_branch == "${{ github.ref_name }}") | select(.conclusion == "success") | .id' | head -n 1)
          echo "run_id=$runId" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download macOS build artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-build
          path: out
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-workflow-run.outputs.run_id }}

      - name: Set executable permissions
        run: |
          # Find all app bundles and make only the MacOS directory executables runnable
          find out -name "*.app" -type d | while read app; do
            if [ -d "$app/Contents/MacOS" ]; then
              echo "Setting permissions for $app/Contents/MacOS"
              chmod +x "$app/Contents/MacOS/"*
              ls -la "$app/Contents/MacOS/"
            fi
          done

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps
      - name: Run E2E tests
        run: npm run test:e2e
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-macos
          path: playwright-report/

  e2e-test-linux:
    needs: [setup, wait-for-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 22.x
        uses: actions/setup-node@v4
        with:
          node-version: 22.x
      - name: Restore cached dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ needs.setup.outputs.cache-key }}
      - name: Install dependencies
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: npm ci
      - name: Get build workflow run ID
        id: get-workflow-run
        run: |
          runId=$(gh api repos/${{ github.repository }}/actions/workflows/build.yml/runs --jq '.workflow_runs[] | select(.head_branch == "${{ github.ref_name }}") | select(.conclusion == "success") | .id' | head -n 1)
          echo "run_id=$runId" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download Linux build artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: out
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ steps.get-workflow-run.outputs.run_id }}

      - name: Debug Linux structure
        run: |
          echo "Directory contents:"
          find out -type f | sort
          echo "Directory structure:"
          find out -type d | sort
          echo "Check if the actual electron app exists:"
          find out -type f -executable || echo "No executable files found"

      - name: Set executable permissions
        run: |
          # Make all Electron app executables runnable 
          find out -type f -name "kenmei-to-anilist" -o -name "chrome_crashpad_handler" -o -name "chrome-sandbox" | xargs -I{} chmod +x {}

          # Make the main app directory executable files runnable - this is critical
          if [ -d "out/Kenmei to Anilist-linux-x64" ]; then
            echo "Making all files in main app directory executable"
            find "out/Kenmei to Anilist-linux-x64" -type f -exec chmod +x {} \;
          fi

          # For any unpacked .asar files
          if [ -d "out/Kenmei to Anilist-linux-x64/resources/app.asar.unpacked" ]; then
            echo "Making unpacked asar binaries executable"
            find "out/Kenmei to Anilist-linux-x64/resources/app.asar.unpacked" -type f -not -path "*/node_modules/*" -exec chmod +x {} \;
          fi

          # Making the DEB file executable if it exists
          if [ -f "out/make/deb/x64/kenmei-to-anilist_3.0.0_amd64.deb" ]; then
            echo "Making DEB file executable"
            chmod +x "out/make/deb/x64/kenmei-to-anilist_3.0.0_amd64.deb"
          fi

          # List updated executable files
          echo "Executable files after permission update:"
          find out -type f -executable | sort

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libgtk-3-0 \
            libnotify-dev \
            libgconf-2-4 \
            libnss3 \
            libxss1 \
            libasound2 \
            libxtst6 \
            xvfb \
            libgbm-dev \
            libxkbcommon-x11-0 \
            xauth \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libatspi2.0-0

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          npm run test:e2e
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-linux
          path: playwright-report/
